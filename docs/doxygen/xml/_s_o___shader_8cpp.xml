<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="_s_o___shader_8cpp" kind="file" language="C++">
    <compoundname>SO_Shader.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scene_objects_8hpp" kindref="compound">sceneObjects.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//compile<sp/>a<sp/>vertex<sp/>shader<sp/>from<sp/>the<sp/>given<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___shader_1a21ef07de1a025f555741a7db4fe5c3fc" kindref="member">sceneObjects::SO_Shader::createVertexShader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>vertexSource)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___shader_1a34141357f0e1e47358e038ea9a17d33a" kindref="member">vertexShaderID</ref><sp/>=<sp/>glCreateShader(GL_VERTEX_SHADER);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>glShaderSource(<ref refid="classscene_objects_1_1_s_o___shader_1a34141357f0e1e47358e038ea9a17d33a" kindref="member">vertexShaderID</ref>,<sp/>1,<sp/>&amp;vertexSource,<sp/>NULL);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>glCompileShader(<ref refid="classscene_objects_1_1_s_o___shader_1a34141357f0e1e47358e038ea9a17d33a" kindref="member">vertexShaderID</ref>);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>status;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetShaderiv(<ref refid="classscene_objects_1_1_s_o___shader_1a34141357f0e1e47358e038ea9a17d33a" kindref="member">vertexShaderID</ref>,<sp/>GL_COMPILE_STATUS,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>GL_TRUE)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;vertex<sp/>shader<sp/>%d<sp/>compiled<sp/>successfully\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="classscene_objects_1_1_s_o___shader_1a34141357f0e1e47358e038ea9a17d33a" kindref="member">vertexShaderID</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[512];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetShaderInfoLog(<ref refid="classscene_objects_1_1_s_o___shader_1a34141357f0e1e47358e038ea9a17d33a" kindref="member">vertexShaderID</ref>,<sp/>512,<sp/>NULL,<sp/>buffer);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(vertexSource);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nvertex<sp/>shader<sp/>%d<sp/>failed<sp/>to<sp/>compile\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="classscene_objects_1_1_s_o___shader_1a34141357f0e1e47358e038ea9a17d33a" kindref="member">vertexShaderID</ref>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//compile<sp/>a<sp/>fragment<sp/>shader<sp/>from<sp/>the<sp/>given<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___shader_1a88e296911a8c6245ff6a01406ad627b2" kindref="member">sceneObjects::SO_Shader::createFragmentShader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fragmentSource)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>fragmentShaderID<sp/>=<sp/>glCreateShader(GL_FRAGMENT_SHADER);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>glShaderSource(fragmentShaderID,<sp/>1,<sp/>&amp;fragmentSource,<sp/>NULL);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>glCompileShader(fragmentShaderID);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>status;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetShaderiv(fragmentShaderID,<sp/>GL_COMPILE_STATUS,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>GL_TRUE)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;fragment<sp/>shader<sp/>%d<sp/>compiled<sp/>successfully\n&quot;</highlight><highlight class="normal">,<sp/>fragmentShaderID);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[512];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetShaderInfoLog(fragmentShaderID,<sp/>512,<sp/>NULL,<sp/>buffer);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(fragmentSource);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nfragment<sp/>shader<sp/>%d<sp/>failed<sp/>to<sp/>compile\n&quot;</highlight><highlight class="normal">,<sp/>fragmentShaderID);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//link<sp/>together<sp/>the<sp/>previously<sp/>compiled<sp/>shaders<sp/>into<sp/>a<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___shader_1aa780feaae596dfabf590287397cca39a" kindref="member">sceneObjects::SO_Shader::linkProgram</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>programID<sp/>=<sp/>glCreateProgram();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>glAttachShader(programID,<sp/>vertexShaderID);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>glAttachShader(programID,<sp/>fragmentShaderID);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindFragDataLocation(programID,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;outColor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>glLinkProgram(programID);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>status;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetProgramiv(programID,<sp/>GL_LINK_STATUS,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>GL_TRUE)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;program<sp/>%d<sp/>linked<sp/>successfully\n&quot;</highlight><highlight class="normal">,<sp/>programID);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[512];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetProgramInfoLog(programID,<sp/>512,<sp/>NULL,<sp/>buffer);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;program<sp/>%d<sp/>failed<sp/>to<sp/>link\n&quot;</highlight><highlight class="normal">,<sp/>programID);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>modelMatrixLoc<sp/>=<sp/>glGetUniformLocation(programID,<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>viewMatrixLoc<sp/>=<sp/>glGetUniformLocation(programID,<sp/></highlight><highlight class="stringliteral">&quot;view&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>projectionMatrixLoc<sp/>=<sp/>glGetUniformLocation(programID,<sp/></highlight><highlight class="stringliteral">&quot;proj&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>programCreated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>glDeleteShader(fragmentShaderID);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>glDeleteShader(vertexShaderID);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//returns<sp/>the<sp/>ID<sp/>of<sp/>the<sp/>program<sp/>associated<sp/>with<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">GLuint<sp/><ref refid="classscene_objects_1_1_s_o___shader_1af20a5f6692ee551d05997a1cd0aad875" kindref="member">sceneObjects::SO_Shader::getProgramID</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>programID;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//applies<sp/>the<sp/>model<sp/>matrix<sp/>to<sp/>the<sp/>shader<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//model<sp/>matrix<sp/>transforms<sp/>from<sp/>modelspace<sp/>to<sp/>worldspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___shader_1a469e22af8baa4fdf1e1eb84f25a6b086" kindref="member">sceneObjects::SO_Shader::setModelMatrix</ref>(glm::mat4<sp/>modelMatrix)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniformMatrix4fv(programID,<sp/>modelMatrixLoc,<sp/>1,<sp/>GL_FALSE,<sp/>glm::value_ptr(modelMatrix));</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//applies<sp/>the<sp/>view<sp/>matrix<sp/>to<sp/>the<sp/>shader<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//view<sp/>matrix<sp/>transforms<sp/>from<sp/>worldspace<sp/>to<sp/>cameraspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___shader_1a686a2c3bf7c954e54dec34134ebd1260" kindref="member">sceneObjects::SO_Shader::setViewMatrix</ref>(glm::mat4<sp/>viewMatrix)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniformMatrix4fv(programID,<sp/>viewMatrixLoc,<sp/>1,<sp/>GL_FALSE,<sp/>glm::value_ptr(viewMatrix));</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>position<sp/>of<sp/>the<sp/>camera<sp/>in<sp/>the<sp/>shader<sp/>program<sp/>in<sp/>worldspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//method<sp/>has<sp/>no<sp/>effect<sp/>in<sp/>SO::Shader<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___shader_1ace394ba61101dbcf3f35931f9107513c" kindref="member">sceneObjects::SO_Shader::setViewPosition</ref>(glm::vec3<sp/>viewPosition)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//applies<sp/>the<sp/>projection<sp/>matrix<sp/>to<sp/>the<sp/>shader<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//projection<sp/>matrix<sp/>transforms<sp/>from<sp/>cameraspace<sp/>to<sp/>clipspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___shader_1a064bc26e370a8ebfe8046d5400d83518" kindref="member">sceneObjects::SO_Shader::setProjectionMatrix</ref>(glm::mat4<sp/>projectionMatrix)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniformMatrix4fv(programID,<sp/>projectionMatrixLoc,<sp/>1,<sp/>GL_FALSE,<sp/>glm::value_ptr(projectionMatrix));</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//destructor<sp/>deletes<sp/>the<sp/>opengl<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="classscene_objects_1_1_s_o___shader_1a1089f63927aca4120f238916f4adb7a4" kindref="member">sceneObjects::SO_Shader::~SO_Shader</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(programCreated)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDeleteProgram(programID);<sp/></highlight><highlight class="comment">//destructor<sp/>deletes<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Robert/Documents/GitHub/sceneObjects/SRC/SO_Shader.cpp"/>
  </compounddef>
</doxygen>
