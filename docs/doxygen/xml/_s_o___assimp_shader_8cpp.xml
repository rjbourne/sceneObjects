<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="_s_o___assimp_shader_8cpp" kind="file" language="C++">
    <compoundname>SO_AssimpShader.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scene_objects_8hpp" kindref="compound">sceneObjects.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scene_models_8hpp" kindref="compound">sceneModels.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generate<sp/>a<sp/>shader<sp/>program<sp/>for<sp/>a<sp/>assimp<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">GLuint<sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a19f4a529473055d5257a8cf24c8a57aa" kindref="member">sceneObjects::SO_AssimpShader::generate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberLightsIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diffuseTextures,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>specularTextures,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normalTextures)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a45e509ee4c09486482a344a02f0b6529" kindref="member">numberLights</ref><sp/>=<sp/>numberLightsIn;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>vertexSourceStr;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#version<sp/>330<sp/>core</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout<sp/>(location<sp/>=<sp/>0)<sp/>in<sp/>vec3<sp/>position;</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout<sp/>(location<sp/>=<sp/>1)<sp/>in<sp/>vec3<sp/>normal;</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout<sp/>(location<sp/>=<sp/>2)<sp/>in<sp/>vec2<sp/>texCoord;)glsl&quot;;</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalTextures<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout<sp/>(location<sp/>=<sp/>3)<sp/>in<sp/>vec3<sp/>tangent;</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>vec3<sp/>worldPos;</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>vec2<sp/>TexCoord;)glsl&quot;;</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalTextures<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>mat3<sp/>TBN;</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>vec3<sp/>norm;</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>mat4<sp/>normalMatrix;</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>mat4<sp/>model;</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>mat4<sp/>view;</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>mat4<sp/>proj;</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gl_Position<sp/>=<sp/>proj<sp/>*<sp/>view<sp/>*<sp/><sp/>model<sp/>*<sp/>vec4(position,<sp/>1.0);)glsl&quot;;</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalTextures<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>T<sp/>=<sp/>normalize(vec3(normalMatrix<sp/>*<sp/>vec4(tangent,<sp/>0.0)));</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>N<sp/>=<sp/>normalize(vec3(normalMatrix<sp/>*<sp/>vec4(normal,<sp/>0.0)));</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>re-orthogonalize<sp/>T<sp/>with<sp/>respect<sp/>to<sp/>N<sp/>-<sp/>Gram-Schmidt<sp/>process</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>normalize(T<sp/>-<sp/>dot(T,<sp/>N)<sp/>*<sp/>N);</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>then<sp/>retrieve<sp/>perpendicular<sp/>vector<sp/>B<sp/>with<sp/>the<sp/>cross<sp/>product<sp/>of<sp/>T<sp/>and<sp/>N</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>B<sp/>=<sp/>cross(N,<sp/>T);</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TBN<sp/>=<sp/>mat3(T,<sp/>B,<sp/>N);</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>normalize(vec3(normalMatrix<sp/>*<sp/>vec4(normal,<sp/>0.0)));</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>vertexSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worldPos<sp/>=<sp/>vec3(model<sp/>*<sp/>vec4(position,<sp/>1.0));</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TexCoord<sp/>=<sp/>texCoord;</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::string<sp/>fragmentSourceStr;</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>fragmentSourceStr<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#version<sp/>330<sp/>core</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>PointLight<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>lightPos;</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>constant;</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>linear;</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>quadratic;</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>ambient;</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>diffuse;</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>specular;</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>vec3<sp/>worldPos;</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>vec2<sp/>TexCoord;)glsl&quot;;</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalTextures<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragmentSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>mat3<sp/>TBN;</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragmentSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>vec3<sp/>norm;</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>fragmentSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>vec4<sp/>outColor;</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>vec3<sp/>viewPos;</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>unsigned<sp/>int<sp/>specPower;</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>PointLight<sp/>lights[)glsl&quot;<sp/>+<sp/>std::to_string(<ref refid="classscene_objects_1_1_s_o___assimp_shader_1a45e509ee4c09486482a344a02f0b6529" kindref="member">numberLights</ref>)<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(];</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>)glsl&quot;<sp/>+<sp/>(std::string)((diffuseTextures<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;vec3<sp/>colorDiffuse&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sampler2D<sp/>textureDiffuse&quot;</highlight><highlight class="normal">)<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(;</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>)glsl&quot;<sp/>+<sp/>(std::string)((specularTextures<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;vec3<sp/>colorSpecular&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sampler2D<sp/>textureSpecular&quot;</highlight><highlight class="normal">)<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(;</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;<sp/>+<sp/>(std::string)((normalTextures<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>sampler2D<sp/>textureNormal;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>CalcPointLight(PointLight<sp/>light,<sp/>vec3<sp/>normal,<sp/>vec3<sp/>viewDir)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>lightDir<sp/>=<sp/>normalize(light.lightPos<sp/>-<sp/>worldPos);</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>diffuse<sp/>shading</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>diff<sp/>=<sp/>max(dot(normal,<sp/>lightDir),<sp/>0.0);</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>specular<sp/>shading</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>reflectDir<sp/>=<sp/>reflect(-lightDir,<sp/>normal);</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>spec<sp/>=<sp/>pow(max(dot(viewDir,<sp/>reflectDir),<sp/>0.0),<sp/>specPower);</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>attenuation</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>distance<sp/><sp/><sp/><sp/>=<sp/>length(light.lightPos<sp/>-<sp/>worldPos);</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>attenuation<sp/>=<sp/>1.0<sp/>/<sp/>(light.constant<sp/>+<sp/>light.linear<sp/>*<sp/>distance<sp/>+<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light.quadratic<sp/>*<sp/>(distance<sp/>*<sp/>distance));<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>combine<sp/>results</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>ambient<sp/><sp/>=<sp/>light.ambient<sp/><sp/>*<sp/>)glsl&quot;<sp/>+<sp/>(std::string)((diffuseTextures<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;colorDiffuse&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;texture(textureDiffuse,<sp/>TexCoord).xyz&quot;</highlight><highlight class="normal">)<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(;</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>diffuse<sp/><sp/>=<sp/>light.diffuse<sp/><sp/>*<sp/>diff<sp/>*<sp/>)glsl&quot;<sp/>+<sp/>(std::string)((diffuseTextures<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;colorDiffuse&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;texture(textureDiffuse,<sp/>TexCoord).xyz&quot;</highlight><highlight class="normal">)<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(;</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>specular<sp/>=<sp/>light.specular<sp/>*<sp/>spec<sp/>*<sp/>)glsl&quot;<sp/>+<sp/>(std::string)((specularTextures<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;colorSpecular&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;texture(textureSpecular,<sp/>TexCoord).xyz&quot;</highlight><highlight class="normal">)<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(;</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ambient<sp/><sp/>*=<sp/>attenuation;</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffuse<sp/><sp/>*=<sp/>attenuation;</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specular<sp/>*=<sp/>attenuation;</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ambient<sp/>+<sp/>diffuse<sp/>+<sp/>specular);</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>main()</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{)glsl&quot;;</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalTextures<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragmentSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>norm<sp/>=<sp/>texture(textureNormal,<sp/>TexCoord).rgb;</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>norm<sp/>*<sp/>2.0<sp/>-<sp/>1.0;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>normalize(TBN<sp/>*<sp/>norm);<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)glsl&quot;;</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>fragmentSourceStr<sp/>+=<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>viewDir<sp/>=<sp/>normalize(viewPos<sp/>-<sp/>worldPos);<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec3<sp/>result<sp/>=<sp/>vec3(0.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>)glsl&quot;<sp/>+<sp/>std::to_string(<ref refid="classscene_objects_1_1_s_o___assimp_shader_1a45e509ee4c09486482a344a02f0b6529" kindref="member">numberLights</ref>)<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;glsl(;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>CalcPointLight(lights[i],<sp/>norm,<sp/>viewDir);</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outColor<sp/>=<sp/>vec4(result,<sp/>1.0);</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})glsl&quot;;</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a21ef07de1a025f555741a7db4fe5c3fc" kindref="member">createVertexShader</ref>(vertexSourceStr.c_str());</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a88e296911a8c6245ff6a01406ad627b2" kindref="member">createFragmentShader</ref>(fragmentSourceStr.c_str());</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1aa780feaae596dfabf590287397cca39a" kindref="member">linkProgram</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a63f7e65d971a29692149807e8f6d0117" kindref="member">normalMatrixLoc</ref><sp/>=<sp/>glGetUniformLocation(this-&gt;<ref refid="classscene_objects_1_1_s_o___shader_1af20a5f6692ee551d05997a1cd0aad875" kindref="member">getProgramID</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;normalMatrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a082a5309ab9eb39b5e47b7dbe5199199" kindref="member">viewPositionLoc</ref><sp/>=<sp/>glGetUniformLocation(this-&gt;<ref refid="classscene_objects_1_1_s_o___shader_1af20a5f6692ee551d05997a1cd0aad875" kindref="member">getProgramID</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;viewPos&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1ab25ca2a719695f4c29abbe935ae89e1f" kindref="member">specularPowerLoc</ref><sp/>=<sp/>glGetUniformLocation(this-&gt;<ref refid="classscene_objects_1_1_s_o___shader_1af20a5f6692ee551d05997a1cd0aad875" kindref="member">getProgramID</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;specPower&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a9818c0da9374f29aa2963cae830aa1e6" kindref="member">setSpecularPower</ref>(32);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classscene_objects_1_1_s_o___shader_1af20a5f6692ee551d05997a1cd0aad875" kindref="member">getProgramID</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//applies<sp/>the<sp/>model<sp/>matrix<sp/>to<sp/>the<sp/>shader<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//model<sp/>matrix<sp/>transforms<sp/>from<sp/>modelspace<sp/>to<sp/>worldspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//also<sp/>creates<sp/>and<sp/>applies<sp/>the<sp/>corresponding<sp/>normal<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a16427fc3cc435d3631cb76cee6bfcef0" kindref="member">sceneObjects::SO_AssimpShader::setModelMatrix</ref>(glm::mat4<sp/>modelMatrix)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscene_objects_1_1_s_o___shader_1a469e22af8baa4fdf1e1eb84f25a6b086" kindref="member">SO_Shader::setModelMatrix</ref>(modelMatrix);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::mat4<sp/>normalMatrix<sp/>=<sp/>glm::transpose(glm::inverse(modelMatrix));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniformMatrix4fv(this-&gt;getProgramID(),<sp/>normalMatrixLoc,<sp/>1,<sp/>GL_FALSE,<sp/>glm::value_ptr(normalMatrix));</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>position<sp/>of<sp/>the<sp/>camera<sp/>in<sp/>the<sp/>shader<sp/>program<sp/>in<sp/>worldspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//method<sp/>has<sp/>no<sp/>effect<sp/>in<sp/>SO::Shader<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a22579eb2e1f36180807c9d12de009e0c" kindref="member">sceneObjects::SO_AssimpShader::setViewPosition</ref>(glm::vec3<sp/>viewPosition)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform3fv(this-&gt;getProgramID(),<sp/>viewPositionLoc,<sp/>1,<sp/>glm::value_ptr(viewPosition));</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>position<sp/>of<sp/>a<sp/>light<sp/>in<sp/>worldspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//index<sp/>is<sp/>the<sp/>number<sp/>of<sp/>the<sp/>light<sp/>(rom<sp/>0<sp/>to<sp/>numberLights-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//lightPosition<sp/>is<sp/>the<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1afcf89df4a74b6363e816440835dfb66e" kindref="member">sceneObjects::SO_AssimpShader::setLightPosition</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>glm::vec3<sp/>lightPosition)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>numberLights)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>lights<sp/>array<sp/>is<sp/>out<sp/>of<sp/>range\nrecieved:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\nlength:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(numberLights);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(error.c_str());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lights[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;].lightPos&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>lightPositionLoc<sp/>=<sp/>glGetUniformLocation(this-&gt;getProgramID(),<sp/>name.c_str());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform3fv(this-&gt;getProgramID(),<sp/>lightPositionLoc,<sp/>1,<sp/>glm::value_ptr(lightPosition));</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>constant<sp/>attenuation<sp/>factor<sp/>of<sp/>a<sp/>light<sp/>in<sp/>worldspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//index<sp/>is<sp/>the<sp/>number<sp/>of<sp/>the<sp/>light<sp/>(rom<sp/>0<sp/>to<sp/>numberLights-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//lightConstant<sp/>is<sp/>the<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a51a2fa51de9f9fcafc912d9015286163" kindref="member">sceneObjects::SO_AssimpShader::setLightConstant</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lightConstant)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>numberLights)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>lights<sp/>array<sp/>is<sp/>out<sp/>of<sp/>range\nrecieved:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\nlength:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(numberLights);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(error.c_str());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lights[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;].constant&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>lightConstantLoc<sp/>=<sp/>glGetUniformLocation(this-&gt;getProgramID(),<sp/>name.c_str());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform1f(this-&gt;getProgramID(),<sp/>lightConstantLoc,<sp/>lightConstant);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>linear<sp/>attenuation<sp/>factor<sp/>of<sp/>a<sp/>light<sp/>in<sp/>worldspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//index<sp/>is<sp/>the<sp/>number<sp/>of<sp/>the<sp/>light<sp/>(rom<sp/>0<sp/>to<sp/>numberLights-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//lightLinear<sp/>is<sp/>the<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a65ab939b24816e0422a4fa2c652191d8" kindref="member">sceneObjects::SO_AssimpShader::setLightLinear</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lightLinear)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>numberLights)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>lights<sp/>array<sp/>is<sp/>out<sp/>of<sp/>range\nrecieved:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\nlength:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(numberLights);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(error.c_str());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lights[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;].linear&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>lightLinearLoc<sp/>=<sp/>glGetUniformLocation(this-&gt;getProgramID(),<sp/>name.c_str());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform1f(this-&gt;getProgramID(),<sp/>lightLinearLoc,<sp/>lightLinear);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>quadratic<sp/>attenuation<sp/>factor<sp/>of<sp/>a<sp/>light<sp/>in<sp/>worldspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//index<sp/>is<sp/>the<sp/>number<sp/>of<sp/>the<sp/>light<sp/>(rom<sp/>0<sp/>to<sp/>numberLights-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//lightQuadratic<sp/>is<sp/>the<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a4b9b52842b3f18c50f0790b9009d2809" kindref="member">sceneObjects::SO_AssimpShader::setLightQuadratic</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lightQuadratic)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>numberLights)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>lights<sp/>array<sp/>is<sp/>out<sp/>of<sp/>range\nrecieved:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\nlength:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(numberLights);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(error.c_str());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lights[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;].quadratic&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>lightQuadraticLoc<sp/>=<sp/>glGetUniformLocation(this-&gt;getProgramID(),<sp/>name.c_str());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform1f(this-&gt;getProgramID(),<sp/>lightQuadraticLoc,<sp/>lightQuadratic);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>ambient<sp/>color<sp/>and<sp/>strength<sp/>of<sp/>a<sp/>light</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//index<sp/>is<sp/>the<sp/>number<sp/>of<sp/>the<sp/>light<sp/>(rom<sp/>0<sp/>to<sp/>numberLights-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//lightAmbient<sp/>is<sp/>the<sp/>color<sp/>(RGB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1aa0b7fdd8471a21fa32c7d2e4be702005" kindref="member">sceneObjects::SO_AssimpShader::setLightAmbient</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>glm::vec3<sp/>lightAmbient)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>numberLights)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>lights<sp/>array<sp/>is<sp/>out<sp/>of<sp/>range\nrecieved:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\nlength:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(numberLights);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(error.c_str());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lights[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;].ambient&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>lightAmbientLoc<sp/>=<sp/>glGetUniformLocation(this-&gt;getProgramID(),<sp/>name.c_str());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform3fv(this-&gt;getProgramID(),<sp/>lightAmbientLoc,<sp/>1,<sp/>glm::value_ptr(lightAmbient));</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>diffuse<sp/>color<sp/>and<sp/>strength<sp/>of<sp/>a<sp/>light</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//index<sp/>is<sp/>the<sp/>number<sp/>of<sp/>the<sp/>light<sp/>(rom<sp/>0<sp/>to<sp/>numberLights-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//lightDiffuse<sp/>is<sp/>the<sp/>color<sp/>(RGB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a3dd3f87ba92f485ce0ac7eee7f32bb1c" kindref="member">sceneObjects::SO_AssimpShader::setLightDiffuse</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>glm::vec3<sp/>lightDiffuse)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>numberLights)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>lights<sp/>array<sp/>is<sp/>out<sp/>of<sp/>range\nrecieved:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\nlength:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(numberLights);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(error.c_str());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lights[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;].diffuse&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>lightDiffuseLoc<sp/>=<sp/>glGetUniformLocation(this-&gt;getProgramID(),<sp/>name.c_str());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform3fv(this-&gt;getProgramID(),<sp/>lightDiffuseLoc,<sp/>1,<sp/>glm::value_ptr(lightDiffuse));</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//set<sp/>the<sp/>specular<sp/>color<sp/>and<sp/>strength<sp/>of<sp/>a<sp/>light</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//index<sp/>is<sp/>the<sp/>number<sp/>of<sp/>the<sp/>light<sp/>(rom<sp/>0<sp/>to<sp/>numberLights-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//lightSpecular<sp/>is<sp/>the<sp/>color<sp/>(RGB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1aaa43d9c62abe6dbddbd579d4da733805" kindref="member">sceneObjects::SO_AssimpShader::setLightSpecular</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>glm::vec3<sp/>lightSpecular)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>numberLights)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>lights<sp/>array<sp/>is<sp/>out<sp/>of<sp/>range\nrecieved:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\nlength:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(numberLights);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(error.c_str());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lights[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;].specular&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>lightSpecularLoc<sp/>=<sp/>glGetUniformLocation(this-&gt;getProgramID(),<sp/>name.c_str());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform3fv(this-&gt;getProgramID(),<sp/>lightSpecularLoc,<sp/>1,<sp/>glm::value_ptr(lightSpecular));</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classscene_objects_1_1_s_o___assimp_shader_1a9818c0da9374f29aa2963cae830aa1e6" kindref="member">sceneObjects::SO_AssimpShader::setSpecularPower</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>specPower)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>glProgramUniform1ui(this-&gt;getProgramID(),<sp/>specularPowerLoc,<sp/>specPower);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Robert/Documents/GitHub/sceneObjects/SRC/SO_AssimpShader.cpp"/>
  </compounddef>
</doxygen>
