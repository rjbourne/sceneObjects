<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="mesh_functions_8cpp" kind="file" language="C++">
    <compoundname>meshFunctions.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scene_objects_8hpp" kindref="compound">sceneObjects.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//create<sp/>a<sp/>sphere<sp/>mesh<sp/>starting<sp/>with<sp/>an<sp/>icosohedron<sp/>base<sp/>(an<sp/>icosphere)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//subdivisions<sp/>is<sp/>the<sp/>number<sp/>of<sp/>divisions<sp/>along<sp/>each<sp/>edge<sp/>of<sp/>the<sp/>starting<sp/>icosahedron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="structscene_objects_1_1_s_o___mesh_data" kindref="compound">sceneObjects::SO_MeshData</ref><sp/><ref refid="namespacescene_objects_1a32b10fae4fe3a240ba3e600c1858db50" kindref="member">sceneObjects::createIcosphere</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subdivisions)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>icosahedron<sp/>https://en.wikipedia.org/wiki/Regular_icosahedron,<sp/>https://en.wikipedia.org/wiki/Regular_icosahedron#/media/File:Icosahedron-golden-rectangles.svg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi<sp/>=<sp/>(1.0f<sp/>+<sp/>sqrt(5.0f))/2;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;glm::vec3&gt;<sp/>vertices;<sp/></highlight><highlight class="comment">//vector<sp/>because<sp/>more<sp/>vertices<sp/>will<sp/>be<sp/>added<sp/>when<sp/>the<sp/>mesh<sp/>is<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(0.0f,<sp/><sp/>1.0f,<sp/><sp/><sp/>phi));<sp/><sp/></highlight><highlight class="comment">//0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(0.0f,<sp/><sp/>1.0f,<sp/><sp/><sp/>-phi));<sp/></highlight><highlight class="comment">//1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(0.0f,<sp/><sp/>-1.0f,<sp/><sp/>phi));<sp/><sp/></highlight><highlight class="comment">//2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(0.0f,<sp/><sp/>-1.0f,<sp/><sp/>-phi));<sp/></highlight><highlight class="comment">//3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(phi,<sp/><sp/><sp/>0.0f,<sp/><sp/><sp/>1.0f));<sp/></highlight><highlight class="comment">//4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(-phi,<sp/><sp/><sp/>0.0f,<sp/><sp/><sp/>1.0f));</highlight><highlight class="comment">//5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(phi,<sp/><sp/>0.0f,<sp/><sp/><sp/>-1.0f));<sp/></highlight><highlight class="comment">//6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(-phi,<sp/><sp/>0.0f,<sp/><sp/><sp/>-1.0f));</highlight><highlight class="comment">//7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(1.0f,<sp/><sp/>phi,<sp/><sp/><sp/><sp/>0.0f));<sp/></highlight><highlight class="comment">//8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(1.0f,<sp/><sp/>-phi,<sp/><sp/><sp/>0.0f));<sp/></highlight><highlight class="comment">//9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(-1.0f,<sp/>phi,<sp/><sp/><sp/><sp/>0.0f));<sp/></highlight><highlight class="comment">//10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.push_back(glm::vec3(-1.0f,<sp/>-phi,<sp/><sp/><sp/>0.0f));<sp/></highlight><highlight class="comment">//11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edges[30][subdivisions+1];<sp/></highlight><highlight class="comment">//https://en.wikipedia.org/wiki/Regular_icosahedron#/media/File:Icosahedron-golden-rectangles.svg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edges<sp/>in<sp/>order<sp/>with<sp/>smallest<sp/>indexed<sp/>vertex<sp/>first<sp/>-<sp/>use<sp/>indicesnnot<sp/>ponters<sp/>so<sp/>can<sp/>construct<sp/>an<sp/>elements<sp/>array<sp/>for<sp/>OpenGL<sp/>with<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edges<sp/>across<sp/>short<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[0][0]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/>edges[0][subdivisions]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[1][0]<sp/>=<sp/>1;<sp/><sp/><sp/><sp/>edges[1][subdivisions]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[2][0]<sp/>=<sp/>4;<sp/><sp/><sp/><sp/>edges[2][subdivisions]<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[3][0]<sp/>=<sp/>5;<sp/><sp/><sp/><sp/>edges[3][subdivisions]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[4][0]<sp/>=<sp/>8;<sp/><sp/><sp/><sp/>edges[4][subdivisions]<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[5][0]<sp/>=<sp/>9;<sp/><sp/><sp/><sp/>edges[5][subdivisions]<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edges<sp/>across<sp/>gaps<sp/>-<sp/>each<sp/>+-1.0<sp/>goes<sp/>to<sp/>the<sp/>vertex<sp/>with<sp/>a<sp/>corresponding<sp/>+-phi<sp/>coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[6][0]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/>edges[6][subdivisions]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[7][0]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/>edges[7][subdivisions]<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[8][0]<sp/>=<sp/>1;<sp/><sp/><sp/><sp/>edges[8][subdivisions]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[9][0]<sp/>=<sp/>1;<sp/><sp/><sp/><sp/>edges[9][subdivisions]<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[10][0]<sp/>=<sp/>2;<sp/><sp/><sp/>edges[10][subdivisions]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[11][0]<sp/>=<sp/>2;<sp/><sp/><sp/>edges[11][subdivisions]<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[12][0]<sp/>=<sp/>3;<sp/><sp/><sp/>edges[12][subdivisions]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[13][0]<sp/>=<sp/>3;<sp/><sp/><sp/>edges[13][subdivisions]<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[14][0]<sp/>=<sp/>0;<sp/><sp/><sp/>edges[14][subdivisions]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[15][0]<sp/>=<sp/>2;<sp/><sp/><sp/>edges[15][subdivisions]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[16][0]<sp/>=<sp/>0;<sp/><sp/><sp/>edges[16][subdivisions]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[17][0]<sp/>=<sp/>2;<sp/><sp/><sp/>edges[17][subdivisions]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[18][0]<sp/>=<sp/>1;<sp/><sp/><sp/>edges[18][subdivisions]<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[19][0]<sp/>=<sp/>3;<sp/><sp/><sp/>edges[19][subdivisions]<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[20][0]<sp/>=<sp/>1;<sp/><sp/><sp/>edges[20][subdivisions]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[21][0]<sp/>=<sp/>3;<sp/><sp/><sp/>edges[21][subdivisions]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[22][0]<sp/>=<sp/>4;<sp/><sp/><sp/>edges[22][subdivisions]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[23][0]<sp/>=<sp/>6;<sp/><sp/><sp/>edges[23][subdivisions]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[24][0]<sp/>=<sp/>4;<sp/><sp/><sp/>edges[24][subdivisions]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[25][0]<sp/>=<sp/>6;<sp/><sp/><sp/>edges[25][subdivisions]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[26][0]<sp/>=<sp/>5;<sp/><sp/><sp/>edges[26][subdivisions]<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[27][0]<sp/>=<sp/>7;<sp/><sp/><sp/>edges[27][subdivisions]<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[28][0]<sp/>=<sp/>5;<sp/><sp/><sp/>edges[28][subdivisions]<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>edges[29][0]<sp/>=<sp/>7;<sp/><sp/><sp/>edges[29][subdivisions]<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>faces[20][3];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//faces<sp/>in<sp/>order<sp/>so<sp/>edge:<sp/>0:<sp/>(a,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1:<sp/>(a,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2:<sp/>(b,<sp/>c)<sp/><sp/><sp/><sp/><sp/>with<sp/>a<sp/>&lt;<sp/>b<sp/>&lt;<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//faces<sp/>with<sp/>a<sp/>short<sp/>rectangle<sp/>edge,<sp/>if<sp/>one<sp/>edge<sp/>is<sp/>the<sp/>short<sp/>one<sp/>-<sp/>the<sp/>others<sp/>must<sp/>be<sp/>one<sp/>that<sp/>connects<sp/>to<sp/>the<sp/>same<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg<sp/>edges[0]<sp/>contains<sp/>0,2<sp/>:<sp/>and<sp/>only<sp/>vertices<sp/>4,5<sp/>connect<sp/>to<sp/>both<sp/>via<sp/>an<sp/>edge<sp/>eg.<sp/>edges<sp/>0,<sp/>14,<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[0][0]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/>faces[0][1]<sp/>=<sp/>14,<sp/><sp/><sp/>faces[0][2]<sp/>=<sp/>15;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[1][0]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/>faces[1][1]<sp/>=<sp/>16;<sp/><sp/><sp/>faces[1][2]<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[2][0]<sp/>=<sp/>1;<sp/><sp/><sp/><sp/>faces[2][1]<sp/>=<sp/>18;<sp/><sp/><sp/>faces[2][2]<sp/>=<sp/>19;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[3][0]<sp/>=<sp/>1;<sp/><sp/><sp/><sp/>faces[3][1]<sp/>=<sp/>20;<sp/><sp/><sp/>faces[3][2]<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[4][0]<sp/>=<sp/>2;<sp/><sp/><sp/><sp/>faces[4][1]<sp/>=<sp/>22;<sp/><sp/><sp/>faces[4][2]<sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[5][0]<sp/>=<sp/>2;<sp/><sp/><sp/><sp/>faces[5][1]<sp/>=<sp/>24;<sp/><sp/><sp/>faces[5][2]<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[6][0]<sp/>=<sp/>3;<sp/><sp/><sp/><sp/>faces[6][1]<sp/>=<sp/>26;<sp/><sp/><sp/>faces[6][2]<sp/>=<sp/>27;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[7][0]<sp/>=<sp/>3;<sp/><sp/><sp/><sp/>faces[7][1]<sp/>=<sp/>28;<sp/><sp/><sp/>faces[7][2]<sp/>=<sp/>29;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[8][0]<sp/>=<sp/>6;<sp/><sp/><sp/><sp/>faces[8][1]<sp/>=<sp/>7;<sp/><sp/><sp/><sp/>faces[8][2]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[9][0]<sp/>=<sp/>8;<sp/><sp/><sp/><sp/>faces[9][1]<sp/>=<sp/>9;<sp/><sp/><sp/><sp/>faces[9][2]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[10][0]<sp/>=<sp/>10;<sp/><sp/>faces[10][1]<sp/>=<sp/>11;<sp/><sp/>faces[10][2]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[11][0]<sp/>=<sp/>12;<sp/><sp/>faces[11][1]<sp/>=<sp/>13;<sp/><sp/>faces[11][2]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//final<sp/>8<sp/>faces<sp/>-<sp/>consider<sp/>1<sp/>rectange<sp/>in<sp/>image<sp/>above,<sp/>in<sp/>direction<sp/>of<sp/>+-1,<sp/>point<sp/>2<sp/>has<sp/>+-phi<sp/>in<sp/>same<sp/>coord<sp/>and<sp/>+-1<sp/>in<sp/>other,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//final<sp/>point<sp/>has<sp/>+-phi<sp/>in<sp/>same<sp/>coord<sp/>as<sp/>2nd&apos;s<sp/>+-1<sp/>and<sp/>+-1<sp/>in<sp/>same<sp/>coord<sp/>as<sp/>1sts<sp/>+-phi.<sp/>All<sp/>+-s<sp/>must<sp/>match<sp/>per<sp/>coord</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[12][0]<sp/>=<sp/>14;<sp/>faces[12][1]<sp/>=<sp/>6;<sp/>faces[12][2]<sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[13][0]<sp/>=<sp/>16;<sp/>faces[13][1]<sp/>=<sp/>7;<sp/>faces[13][2]<sp/>=<sp/>26;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[14][0]<sp/>=<sp/>18;<sp/>faces[14][1]<sp/>=<sp/>8;<sp/>faces[14][2]<sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[15][0]<sp/>=<sp/>20;<sp/>faces[15][1]<sp/>=<sp/>9;<sp/>faces[15][2]<sp/>=<sp/>27;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[16][0]<sp/>=<sp/>15;<sp/>faces[16][1]<sp/>=<sp/>10;<sp/>faces[16][2]<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[17][0]<sp/>=<sp/>17;<sp/>faces[17][1]<sp/>=<sp/>11;<sp/>faces[17][2]<sp/>=<sp/>28;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[18][0]<sp/>=<sp/>19;<sp/>faces[18][1]<sp/>=<sp/>12;<sp/>faces[18][2]<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>faces[19][0]<sp/>=<sp/>21;<sp/>faces[19][1]<sp/>=<sp/>13;<sp/>faces[19][2]<sp/>=<sp/>29;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//subdivide<sp/>each<sp/>icosohedron<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>division<sp/>=<sp/>1;<sp/>division<sp/>&lt;<sp/>subdivisions;<sp/>division++)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge<sp/>=<sp/>0;<sp/>edge<sp/>&lt;<sp/>30;<sp/>edge++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>newVector<sp/>=<sp/><ref refid="namespacescene_objects_1a68e19ab4cc523ffa7b31eef60d35745a" kindref="member">sceneObjects::createRatioVector</ref>(subdivisions,<sp/>division,<sp/>vertices[edges[edge][0]],<sp/>vertices[edges[edge][subdivisions]]);;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.push_back(newVector);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges[edge][division]<sp/>=<sp/>vertices.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>inner<sp/>points<sp/>on<sp/>each<sp/>face</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//face<sp/>has<sp/>vertices<sp/>a,b,c<sp/>a&lt;b&lt;c<sp/>and<sp/>edges<sp/>(a,b),<sp/>(a,c),<sp/>(b,c).<sp/>rows<sp/>start<sp/>at<sp/>row[0]<sp/>=<sp/>vertex<sp/>a<sp/>and<sp/>move<sp/>towards<sp/>row[subdivision]<sp/>=<sp/>edge<sp/>(b,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>faceElements;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>face<sp/>=<sp/>0;<sp/>face<sp/>&lt;<sp/>20;<sp/>face++)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>currentRow;<sp/></highlight><highlight class="comment">//<sp/>current<sp/>row<sp/>of<sp/>vertices<sp/>being<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>nextRow;<sp/></highlight><highlight class="comment">//<sp/>next<sp/>row<sp/>of<sp/>vertices<sp/>-<sp/>being<sp/>created<sp/>to<sp/>provide<sp/>end<sp/>vertices<sp/>for<sp/>faces<sp/>on<sp/>currentrow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentRow.push_back(edges[faces[face][0]][0]);<sp/></highlight><highlight class="comment">//<sp/>start<sp/>with<sp/>current<sp/>row<sp/>being<sp/>just<sp/>vertex<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>subdivisions;<sp/>row++)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>last<sp/>row<sp/>of<sp/>faces<sp/>is<sp/>row[subdivision-1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>==<sp/>subdivisions<sp/>-<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>final<sp/>row<sp/>then<sp/>should<sp/>be<sp/>set<sp/>equal<sp/>to<sp/>the<sp/>edge<sp/>(b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextRow.clear();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>subdivisions;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextRow.push_back(edges[faces[face][2]][j]);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>final<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextRow.clear();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextRow.push_back(edges[faces[face][0]][row+1]);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>first<sp/>vector<sp/>from<sp/>edge<sp/>(a,b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>intervening<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slice<sp/>=<sp/>1;<sp/>slice<sp/>&lt;<sp/>row+1;<sp/>slice++)<sp/>{<sp/></highlight><highlight class="comment">//add<sp/>subdvision<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3<sp/>newVector<sp/>=<sp/><ref refid="namespacescene_objects_1a68e19ab4cc523ffa7b31eef60d35745a" kindref="member">sceneObjects::createRatioVector</ref>(row+1,<sp/>slice,<sp/>vertices[edges[faces[face][0]][row+1]],<sp/>vertices[edges[faces[face][1]][row+1]]);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.push_back(newVector);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextRow.push_back(vertices.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextRow.push_back(edges[faces[face][1]][row+1]);<sp/></highlight><highlight class="comment">//add<sp/>final<sp/>vector<sp/>from<sp/>edge<sp/>(a,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>faces<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>row;<sp/>j++)<sp/>{<sp/></highlight><highlight class="comment">//add<sp/>faces<sp/>with<sp/>point<sp/>on<sp/>currentRow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>faceElements.push_back(currentRow[j]);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>faceElements.push_back(nextRow[j]);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>faceElements.push_back(nextRow[j+1]);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>row;<sp/>j++)<sp/>{<sp/></highlight><highlight class="comment">//add<sp/>faces<sp/>with<sp/>edge<sp/>on<sp/>currentRow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>faceElements.push_back(currentRow[j]);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>faceElements.push_back(currentRow[j+1]);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>faceElements.push_back(nextRow[j+1]);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentRow<sp/>=<sp/>nextRow;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;<sp/>i<sp/>&lt;<sp/>vertices.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[i]<sp/>=<sp/>glm::normalize(vertices[i]);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structscene_objects_1_1_s_o___mesh_data" kindref="compound">sceneObjects::SO_MeshData</ref><sp/>icosphereData;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>icosphereData.<ref refid="structscene_objects_1_1_s_o___mesh_data_1a7ce42dfb36400085eae5068036d49fab" kindref="member">vertices</ref><sp/>=<sp/>vertices;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>icosphereData.<ref refid="structscene_objects_1_1_s_o___mesh_data_1acf08f3c53dff8460bd8c30bf599debd8" kindref="member">faceElements</ref><sp/>=<sp/>faceElements;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>icosphereData;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Robert/Documents/GitHub/sceneObjects/SRC/meshFunctions.cpp"/>
  </compounddef>
</doxygen>
